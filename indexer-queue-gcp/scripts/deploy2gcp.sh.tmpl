#!/bin/bash

# Exit as soon as a command fails
set -e

{{$definitionName := getenv "BUILD_DEFINITIONNAME" -}}
{{$sourceBranchName := getenv "BUILD_SOURCEBRANCHNAME" -}}
{{$buildNumber := getenv "BUILD_BUILDNUMBER" -}}

BUILD_DEFINITIONNAME={{$definitionName}}
BUILD_SOURCEBRANCHNAME={{$sourceBranchName}}
BUILD_BUILDNUMBER={{$buildNumber}}

SCRIPTS_DIR=$(dirname $0)
DEPLOY_DIR=$(dirname $SCRIPTS_DIR)

# Go to deploy directory
cd $DEPLOY_DIR
# convert to full path
DEPLOY_DIR=`pwd`
echo "Current working directory: $DEPLOY_DIR"

source $SCRIPTS_DIR/config.sh

echo "This script will deploy the app to $PROJECT_ID"

if [ "$REGION" = "" ]
then
    REGION=$(gcloud config get-value compute/region)
fi

echo "Environment"
echo "  Project = $PROJECT_ID"
echo "  Compute zone = $CLOUDSDK_COMPUTE_ZONE"
echo "  Build definition = $BUILD_DEFINITIONNAME"
echo "  Source branch = $BUILD_SOURCEBRANCHNAME"
echo "  Build number = $BUILD_BUILDNUMBER"
echo "  Directory = $DEPLOY_DIR"

VERSION_NUMBER=$BUILD_BUILDNUMBER
VERSION_NUMBER=$(echo "$VERSION_NUMBER" | tr _ - | tr . - | tr '[:upper:]' '[:lower:]')
SERVICE_NAME="os-indexer-queue"

count=$(gcloud app services list --project $PROJECT_ID | grep $SERVICE_NAME | wc -l)
if [ $count -gt 0 ]; then
  CURRENT_VERSION=$(gcloud app services describe $SERVICE_NAME --project $PROJECT_ID --format=json | jq --raw-output '.split.allocations | keys[0]')
else
  CURRENT_VERSION=""
fi

echo "Current version = $CURRENT_VERSION"
echo "Version to be deployed = $VERSION_NUMBER"

if [ "$VERSION_NUMBER" != "$CURRENT_VERSION" -o "$BUILD_FORCE_DEPLOY" = "true" ]
then
    # If the version $VERSION_NUMBER already exists, but not serving traffic, gcloud app deploy will fail. In this case, simply start that version and migrate traffic to it
    doesVersionExist=`gcloud app versions list --service=$SERVICE_NAME --project=$PROJECT_ID | grep $VERSION_NUMBER | wc -l`
    if [ "$doesVersionExist" -eq "1" ]
    then
        echo "Starting version $VERSION_NUMBER"
        gcloud app versions start $VERSION_NUMBER --service=$SERVICE_NAME --project=$PROJECT_ID --quiet
        echo "Migrating all traffic to version $VERSION_NUMBER"
        gcloud app services set-traffic $SERVICE_NAME --splits $VERSION_NUMBER=1 --project=$PROJECT_ID --quiet
    else

        # Apply sed on appengine-web.xml
        sed -i -e "s/ENVIRONMENT/$ENVIRONMENT/g" src/main/webapp/WEB-INF/appengine-web.xml
        sed -i -e "s/INDEXER_AUDIENCES/$SEARCH_AUDIENCE/g" src/main/webapp/WEB-INF/appengine-web.xml

        # Print the contents of generated appengine-web.xml
        echo "print indexer-queue app appengine after sed"
        cat src/main/webapp/WEB-INF/appengine-web.xml

        echo "Deploying $SERVICE_NAME service"
        mvn appengine:deploy -pl org.opengroup.osdu.indexerqueue:indexer-queue-gcp -Dapp.deploy.project=$PROJECT_ID -Dapp.deploy.version=$VERSION_NUMBER -Dskip.unit.tests=true        
        echo "$SERVICE_NAME service deployed successfully"
    fi
else
    echo "Not deploying the application because $VERSION_NUMBER is already deployed and force deploy flag is not set to true"
fi

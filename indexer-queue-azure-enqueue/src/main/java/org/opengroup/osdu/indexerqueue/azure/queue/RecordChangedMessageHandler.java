// Copyright Â© Microsoft Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//      http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package org.opengroup.osdu.indexerqueue.azure.queue;

import com.google.gson.Gson;
import org.apache.http.HttpStatus;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;

import org.opengroup.osdu.azure.logging.CoreLoggerFactory;
import org.opengroup.osdu.azure.logging.ICoreLogger;
import org.opengroup.osdu.core.common.model.http.DpsHeaders;
import org.opengroup.osdu.core.common.model.search.RecordChangedMessages;
import org.opengroup.osdu.indexerqueue.azure.di.AzureBootstrapConfig;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;

import javax.ws.rs.core.Response;
import java.util.Date;
import java.util.Map;

/***
 * A class to send recordChangedMessages to indexer-service.
 */
@Component
public class RecordChangedMessageHandler {

  HttpPost indexWorkerRequest;
  @Autowired
  private AzureBootstrapConfig azureBootstrapConfig;

  private final Gson gson = new Gson();
  private HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();
  private ICoreLogger Logger = CoreLoggerFactory.getInstance().getLogger(RecordChangedMessageHandler.class.getName());

  /***
   * Create an Http Request to index-worker endpoint of indexer service and deliver RecordChangedMessage.
   * In case of failure, exponential backoff retry is done based on current delivery count by service bus.
   * @param recordChangedMessage 1 batch of PubSubInfo messages generated by storage service and delivered by service bus.
   * @param currentTry The delivery count of the message as sent by service bus. Whenever a message has been delivered under a peek-lock, but has been either explicitly abandoned or the lock has expired, the delivery count on the message is incremented.
   * @return
   * @throws Exception
   */
  public void sendMessagesToIndexer(RecordChangedMessages recordChangedMessage, long currentTry) throws Exception {

    try (CloseableHttpClient indexWorkerClient = httpClientBuilder.build()) {
      Logger.debug("Sending recordChangedMessages to indexer service {}: ", this.gson.toJson(recordChangedMessage));
      indexWorkerRequest = new HttpPost(azureBootstrapConfig.getIndexerWorkerURL());
      indexWorkerRequest.setEntity(new StringEntity(this.gson.toJson(recordChangedMessage)));
      indexWorkerRequest.setHeader(DpsHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);

      Map<String, String> att = recordChangedMessage.getAttributes();

      indexWorkerRequest.setHeader(DpsHeaders.DATA_PARTITION_ID, att.get(DpsHeaders.DATA_PARTITION_ID));
      indexWorkerRequest.setHeader(DpsHeaders.CORRELATION_ID, att.get(DpsHeaders.CORRELATION_ID));

      CloseableHttpResponse response = indexWorkerClient.execute(indexWorkerRequest);

      Logger.info("ResponseStatus: {}", response.getStatusLine().getStatusCode());
      if(response.getStatusLine().getStatusCode()!= 200 && response.getStatusLine().getStatusCode()!= 201) {
        // message could not be indexed by indexer service, retry.
        throw new Exception();
      }

    } catch (Exception e) {
      // If any exception occurs while sending message to indexer service, we cannot acknowledge to service bus.
      // Exponential backoff retry based on current delivery count by SB.
      // Here waitTime is used to delay throwing of exception so that message is pulled again from service bus after exponential retry time.
      int maxDeliveryCount = Integer.parseInt(azureBootstrapConfig.getMaxDeliveryCount());

      if(currentTry == maxDeliveryCount) {
        Logger.warn(String.format("Exception occurred while sending message to indexer service. This message will be sent to dead letter queue: %s", this.gson.toJson(recordChangedMessage)));
      }
      else {
        long waitTime = ((long) Math.pow(2, currentTry) * 10L);
        java.sql.Timestamp before = new java.sql.Timestamp(new Date().getTime());
        Thread.sleep(waitTime);
        java.sql.Timestamp after = new java.sql.Timestamp(new Date().getTime());
        Logger.info("Exception occurred while sending message to indexer service. Exponential Backoff wait time: {}", (after.getTime() - before.getTime()));
      }

      throw e;
    }
  }
}